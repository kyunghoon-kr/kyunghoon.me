{"componentChunkName":"component---src-templates-blog-post-js","path":"/free/코드의-성능과-가독성/","result":{"data":{"site":{"siteMetadata":{"title":"Kyunghoon.me"}},"markdownRemark":{"id":"ea0a58e9-dca4-5f9f-85b3-4672cd1fbb0f","excerpt":"요즘들어 오픈소스를 하도 들여다보니 남이 보기 좋은 코드를 짜는 것이 개발자로써 플러스 요인이라는 걸 새삼 또 느끼게 된다. chart-js…","html":"<p>요즘들어 오픈소스를 하도 들여다보니 남이 보기 좋은 코드를 짜는 것이 개발자로써 플러스 요인이라는 걸 새삼 또 느끼게 된다. <s>chart-js 레퍼런스 미웡</s> 이력서에서 나를 어필할 때는 남들이 보기 좋은 코드를 짜고 싶다고 했지만, 어떤 게 정답인지 간혹 헷갈린다.</p>\n<p>코드 자체를 보기 좋게 짜는 것이랑, 성능이랑 비례하지 않는 경우가 내 경우에는 꽤나 발생하기 때문이다. 남들이 봐도 이해하기 쉽지만 여러 분기를 거치는 코드를 짤 것인가, 최대한 코드를 간결하게 짤 것인가에서 타협을 했어야만 했다.</p>\n<h1 id=\"정답이-없는-것\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%8B%B5%EC%9D%B4-%EC%97%86%EB%8A%94-%EA%B2%83\" aria-label=\"정답이 없는 것 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정답이 없는 것</h1>\n<p>최근에 스터디용으로 들어간 오픈채팅방에서 꽤나 흥미진진한 토론이 일었다. 여러 개의 input에서 각기 다른 값을 받아와야 할 때 리액트의 onChange 함수를 어떻게 쓰는 게 더 좋은 코드일까요? 라는 질문에서 시작했다.\n질문자님께서 비교하신 코드는 대충 재현해보면 다음과 같았다.</p>\n<h3 id=\"1번\" style=\"position:relative;\"><a href=\"#1%EB%B2%88\" aria-label=\"1번 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1번</h3>\n<p>onChange 이벤트를 input의 개수마다 만든다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\nonChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>직관적이지만 확장성이 부족하다고 생각했다. 요즘 뭔가 코드를 짤 때 마다 유지보수할 때를 떠올리는 좋은 건지 모를 습관이 생겼는데, 나중에 입력받아야 하는 양이 늘어나면 계속해서 useState를 늘려줘야 한다.</p>\n<h3 id=\"2번\" style=\"position:relative;\"><a href=\"#2%EB%B2%88\" aria-label=\"2번 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2번</h3>\n<p>입력값의 분기를 두고 state를 객체로 받는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChangeInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>상태관리를 한번에 할 수는 있지만 역시나 입력받는 것의 갯수에 따라 조건문이 늘어날 것이다. 그래도 보기는 좋은 것 같다.</p>\n<h3 id=\"3번\" style=\"position:relative;\"><a href=\"#3%EB%B2%88\" aria-label=\"3번 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3번</h3>\n<p>id에 따라 객체의 property에 바로 할당한다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChangeInput</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">,</span> prev<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사실 내가 제일 자주 쓰는 방법이다. 이러면 input이 아무리 많아도 property에 따라 id만 잘 설정해주면 무한으로 재활용이 가능하다.</p>\n<h3 id=\"그냥-라이브러리를-쓰자\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%83%A5-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%93%B0%EC%9E%90\" aria-label=\"그냥 라이브러리를 쓰자 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그냥 라이브러리를 쓰자</h3>\n<p>hook-form, formlik 등. 이미 이 고민을 나보다 먼저 한 사람들이 만들어 놓은 걸 가져다 쓴다.</p>\n<hr>\n<p>사실 나는 당연히 3번째 코드가 가장 좋은 코드라고 생각했다. 코드가 짧으면서, 자바(타입)스크립트의 객체도 잘 활용했으니깐. 그렇지만 다른 방법이 더 좋은 것 같다고 생각하는 여러 의견들을 들어보니 다 그럴 듯 했다.</p>\n<p>라이브러리를 사용하면 그 라이브러리에 대해 잘 모르는 사람은 레퍼런스를 뒤져봐야 하고, 3번의 방법은 오히려 state가 어떻게 정의되어있는지 숙지가 잘 되어있지 않는 다른 사람이 본다면 오히려 이해하기 힘들 거라는 의견도 있었다. 다 어찌보면 맞는 말이기도 하다. 코딩에는 여러개의 정답이 정해져 있어 골라쓰면 된다는 말이기도 하니깐.</p>\n<p>결국 논점은 코드의 길이냐, 가독성이냐의 문제로 귀결되었다. 혼자 하는 사이드 프로젝트라면 코드의 가독성이고 뭐고 성능만 챙기면 될 수도 있다. (포트폴리오로 공유할 게 아니라면) 반면 수백 명이 보는 코드라면 메모리든, 시간을 더 써서라도 최대한 보기 좋게 짜는 것이 최선일 것이다. 최근에 진행했던 알고리즘 스터디에서도 호출을 한줄에 계속 하면서 가독성 대신 성능을 챙겨도 결국 너무 이해하기 힘든 코드가 되면 안된다는 결론을 내렸으니깐… 결국에는 어느 상황에서 어떤 방법이 적절한 지 판단할 수 있는 근력을 기르는 것이고, 그러려면 결국 남의 코드를 많이 보는 방법뿐인 것 같다 😅</p>\n<hr>\n<p>같은 문제에 대해 다양한 개발자들과 의견을 나눠보는 것은 언제나 도움이 되는 것 같다. 결국 이번 포스팅의 결론도, 앞으로 더 노력하자가 된 것 같다.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/free/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%84%B1%EB%8A%A5%EA%B3%BC-%EA%B0%80%EB%8F%85%EC%84%B1/#%EC%A0%95%EB%8B%B5%EC%9D%B4-%EC%97%86%EB%8A%94-%EA%B2%83\">정답이 없는 것</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/free/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%84%B1%EB%8A%A5%EA%B3%BC-%EA%B0%80%EB%8F%85%EC%84%B1/#1%EB%B2%88\">1번</a></li>\n<li><a href=\"/free/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%84%B1%EB%8A%A5%EA%B3%BC-%EA%B0%80%EB%8F%85%EC%84%B1/#2%EB%B2%88\">2번</a></li>\n<li><a href=\"/free/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%84%B1%EB%8A%A5%EA%B3%BC-%EA%B0%80%EB%8F%85%EC%84%B1/#3%EB%B2%88\">3번</a></li>\n<li><a href=\"/free/%EC%BD%94%EB%93%9C%EC%9D%98-%EC%84%B1%EB%8A%A5%EA%B3%BC-%EA%B0%80%EB%8F%85%EC%84%B1/#%EA%B7%B8%EB%83%A5-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC%EB%A5%BC-%EC%93%B0%EC%9E%90\">그냥 라이브러리를 쓰자</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[짧생글] 코드의 가독성과 성능에 대한 생각","date":"2021-06-18","description":"코드의 질과 가독성은 꼭 비례하는 걸까라는 고민에서 시작합니다.","tag":"짧생글","thumbnail":null}},"previous":{"fields":{"slug":"/blog/netlify-deploy-error/"},"frontmatter":{"title":"[Gatsby + Netlify] 배포 시에 Not Found Error 해결하기"}},"next":{"fields":{"slug":"/nextjs/next-js-00/"},"frontmatter":{"title":"[Next.js 맛보기] - 0) 시작하기 전에"}}},"pageContext":{"id":"ea0a58e9-dca4-5f9f-85b3-4672cd1fbb0f","previousPostId":"3a3cabaf-821e-558e-a7f9-8b5e2913fa24","nextPostId":"6e0b185d-ee48-5943-bcb8-ea31b9d64fb0"}},"staticQueryHashes":["2841359383","916993862","985854018"]}